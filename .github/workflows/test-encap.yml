name: Stress Test Encap

on:
  push:
    branches: [
      master
    ]
  pull_request:
    branches: [
      master
    ]
  workflow_dispatch:  # Allows running this workflow manually from Actions tab


jobs:
  test-encap:


    # Since the Encap test exercises a fair bit of code, but is short and quick
    # enough to not be too much of a burden on the world, we go ahead and do
    # run it for the release and debug builds on the main desktop platforms.
    #
    # (Rather than use the automatic-matrix'ing, we go ahead and list them
    # manually, because that makes it easier to tweak specifics if desired.)
    #
    strategy:
      matrix:
        include:  # put in order of visibility importance (shown in UI)

        - os: macos-latest
          checked: false

        - os: windows-latest
          checked: false

        - os: ubuntu-latest
          checked: false

        - os: macos-latest
          checked: true

        - os: windows-latest
          checked: true

        - os: ubuntu-latest
          checked: true


    # https://github.com/actions/virtual-environments#available-environments
    #
    runs-on: ${{ matrix.os }}


    steps:


  #====# CHECKOUT STEPS #=====================================================#


    # GitHub CI checkout on Windows auto translates LF to CR/LF in files:
    #
    # https://github.com/actions/checkout/issues/135
    #
    # However, Ren-C is taking the long view on this and prohibiting CR/LF in
    # source by default.
    #
    # https://forum.rebol.info/t/newlina-non-grata/1207
    # https://forum.rebol.info/t/1264
    #
    - name: Disable LF to CRLF Auto Translation In Git
      if: matrix.os == 'windows-latest'
      run: |
        git config --global core.autocrlf false
        git config --global core.eol lf


    # https://github.com/actions/checkout
    #
    # See README: Checkout Action
    #
    - uses: actions/checkout@v3  # See README: Trusted Actions



  #====# INSTALL R3 INTERPRETER #=============================================#


    - name: Download and Cache the Interpreter
      uses: metaeducation/ren-c-action@release
      with:
        checked: ${{ matrix.checked }}


  #====# TEST STEPS #==========================================================#

    # The tests are designed to call QUIT and return 1 status on failure, with
    # 0 returned on success.


    # Round Trip Test: Store and Retrieve Data
    #
    - name: Round Trip Test
      uses: metaeducation/ren-c-action@release
      with:
        script: |
          let data: [%store-me.dat #{10200304}]
          let encapped-file: encap data
          let round-trip: get-encap encapped-file
          print ["Round-tripped info:" mold round-trip]
          if round-trip != data [
              fail "Retrieved data did not match data put in"
          ]


    # Execution test: See if Encapping a %main.reb File Produces EXE that
    # will run the embedded script.
    #
    - name: Execution Test
      uses: metaeducation/ren-c-action@release
      with:
        script: |
          let encapped-file: encap [%main.reb {Rebol [] print "Hello Encap"}]
          if system.version.4 <> 3 [  ; Not Windows (EXE is automatically run)
              ;
              ; !!! Note: /SHELL doesn't seem to handle BLOCK! arguments on
              ; POSIX.  Currently the REDUCE is necessary...GROUP!s should likely
              ; be evaluated automatically, and it may be that WORD!s should be
              ; legal, e.g.
              ;
              ;     call [chmod +x (encapped-file)]
              ;
              call reduce ["chmod" "+x" (encapped-file)]
          ]
          let result: copy ""
          call/output encapped-file result
          print ["Encap Said:" mold result]
          if result <> "Hello Encap^/" [
              fail "Executable did not return expected output"
          ]
